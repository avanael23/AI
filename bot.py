from typing import Final
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
# New import for the Gemini API
from google import genai 

# --- 1. CONSTANTS (Replace these with your actual values) ---
TOKEN: Final = '8120444380:AAHixhLwdyvucPn6QcP0c7UC3csPW9Zztrc'  # Your bot's access token from BotFather
BOT_USERNAME: Final = '@mekelleuniversity_bot'  # Your bot's username (e.g., @BBB_banana_bot)
MODEL_NAME: Final = 'gemini-2.5-flash'

# Retrieve Gemini API Key from environment variables (BEST PRACTICE)
# Alternatively, you can hardcode it: GEMINI_API_KEY: Final = 'YOUR_GEMINI_API_KEY'
GEMINI_API_KEY: Final = os.getenv('AIzaSyAEkOlcQlctxcG-QC5itPEJ5PezrrdCNZ4') 

# Initialize the Gemini Client
# It automatically looks for the GEMINI_API_KEY environment variable.
if GEMINI_API_KEY:
    ai_client = genai.Client(api_key=GEMINI_API_KEY)
else:
    print("WARNING: GEMINI_API_KEY environment variable not set.")
    ai_client = None

# --- 2. COMMANDS (Unchanged) ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Responds to the /start command."""
    await update.message.reply_text("Hello, thanks for chatting with me! I am now powered by Gemini 2.5 Flash. Ask me anything!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Responds to the /help command."""
    await update.message.reply_text("I am an AI assistant. Just type your question or message, and I'll respond!")

async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Responds to the /custom command."""
    await update.message.reply_text("This is a custom command. Try asking me about a banana's nutritional value!")

# --------------------------------------------------------------------------------------
# --- 3. RESPONSES LOGIC (UPDATED for Gemini) ---
# This is where your AI integration lives.

async def get_gemini_response(prompt: str) -> str:
    """Sends the user's prompt to Gemini 2.5 Flash and returns the text response."""
    if not ai_client:
        return "Sorry, the AI service is not configured. Please check the GEMINI_API_KEY."

    try:
        # Use generate_content for a single turn conversation
        response = await ai_client.models.generate_content_async(
            model=MODEL_NAME,
            contents=prompt
        )
        return response.text
    except Exception as e:
        print(f"Gemini API Error: {e}")
        return "I'm experiencing a service error right now. Please try again later."


# --------------------------------------------------------------------------------------
# --- 4. MESSAGE HANDLER (UPDATED to call the Gemini function) ---

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles incoming messages and uses Gemini to generate a response."""
    message_type: str = update.message.chat.type
    text: str = update.message.text
    response: str = ""

    print(f'User ({update.message.chat.id}) in {message_type}: "{text}"')

    # Handle group mentions
    if message_type == 'group':
        if BOT_USERNAME in text:
            # Remove the bot username before sending to Gemini
            new_text: str = text.replace(BOT_USERNAME, '').strip()
            response = await get_gemini_response(new_text)
        else:
            # Ignore messages in groups if the bot is not mentioned
            return 
    else:
        # In private chat, process all text
        response = await get_gemini_response(text)

    print(f'Bot: "{response}"')
    await update.message.reply_text(response)

# --------------------------------------------------------------------------------------
# --- 5. ERROR HANDLER (Unchanged) ---
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Logs all errors caused by updates."""
    print(f'Update {update} caused error {context.error}')

# --------------------------------------------------------------------------------------
# --- 6. MAIN EXECUTION (Unchanged) ---
if __name__ == '__main__':
    print('Starting Gemini-powered bot...')
    app = Application.builder().token(TOKEN).build()

    # Add Command Handlers
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('custom', custom_command))

    # Add Message Handler (for text messages)
    # The response is now generated by Gemini 2.5 Flash
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    # Add Error Handler
    app.add_error_handler(error)

    # Start the bot by polling for updates
    print('Polling...')
    app.run_polling(poll_interval=3)
